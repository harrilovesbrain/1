function hs_filterMUA(basepath)
%% ================================================================
%  filterMUA_fixed_v4.m
%  Purpose: Extract MUA envelope (500‚Äì5000 Hz band)
%           from a .dat file using sessionInfo structure,
%           with automatic 300-s WAKE-epoch extraction or default 300 s.
%  Compatible with both SleepStateEpisodes.ints.WAKEepisode
%  and SleepState.ints.WAKE field formats.
%
%  Created by Husang Lee
% ================================================================

if nargin < 1 || ~isfolder(basepath)
    error('Basepath not provided or invalid.');
end
fprintf('\nüìÇ Processing folder: %s\n', basepath);

%% ----------------------------------------------------------------
% 1Ô∏è‚É£  Load session information
% -----------------------------------------------------------------
sessionInfoFile = dir(fullfile(basepath, '*.sessionInfo.mat'));
if isempty(sessionInfoFile)
    error('sessionInfo.mat not found in %s', basepath);
end
load(fullfile(basepath, sessionInfoFile(1).name), 'sessionInfo');

datFile = dir(fullfile(basepath, '*.dat'));
if isempty(datFile)
    error('No .dat file found in %s', basepath);
end
fileDat = fullfile(basepath, datFile(1).name);

% --- sampling rate ---
if isfield(sessionInfo, 'rates') && isfield(sessionInfo.rates, 'wideband')
    fs = sessionInfo.rates.wideband;
elseif isfield(sessionInfo, 'session') && isfield(sessionInfo.session, 'SampleRate')
    fs = sessionInfo.session.SampleRate;
else
    error('Sampling rate not found in sessionInfo.');
end

% --- channels ---
nChannels = sessionInfo.nChannels;
if isfield(sessionInfo, 'channels')
    channels = sessionInfo.channels;
else
    channels = 0:(nChannels-1);
end
targetFs = sessionInfo.lfpSampleRate;
dsFactor = round(fs / targetFs);

fprintf('Loaded %s | %d ch | fs=%.0f Hz | target=%.0f Hz\n', ...
    sessionInfoFile(1).name, nChannels, fs, targetFs);

%% ----------------------------------------------------------------
% 2Ô∏è‚É£  Choose epoch (5 min default or WAKE)
% -----------------------------------------------------------------
defaultEpochDuration = 300;  % 5 min
startTime = 0;               % seconds
epochDuration = defaultEpochDuration;
epochType = "First5min";

sleepMat = dir(fullfile(basepath, '*SleepState*.mat'));   % any sleep scoring file
if ~isempty(sleepMat)
    fprintf('üí§  Sleep state file detected ‚Üí extracting WAKE epoch.\n');
    S = load(fullfile(basepath, sleepMat(1).name));  % don't assume var name
    wakeEpochs = getWakeEpochs_fromStruct(S);        % Nx2 in seconds

    if ~isempty(wakeEpochs)
        % pick first ‚â•300 s, else longest
        longIdx = find(diff(wakeEpochs,1,2) >= defaultEpochDuration, 1);
        if ~isempty(longIdx)
            startTime     = wakeEpochs(longIdx,1);
            epochDuration = defaultEpochDuration;
        else
            [~, idx] = max(diff(wakeEpochs,1,2));
            startTime     = wakeEpochs(idx,1);
            epochDuration = diff(wakeEpochs(idx,:));
        end
        epochType = "WAKE";
        fprintf('Using WAKE window %.1f‚Äì%.1f s (%.1f s)\n', ...
            startTime, startTime+epochDuration, epochDuration);
    else
        warning('No valid WAKE epoch found; using first 300 s.');
    end
else
    fprintf('Normal session ‚Üí using first 300 s window.\n');
end

%% ----------------------------------------------------------------
% 3Ô∏è‚É£  Design band-pass filter
% -----------------------------------------------------------------
lowCut  = 500;  highCut = 5000;  order = 3;
[b,a]   = butter(order, [lowCut highCut]/(fs/2), 'bandpass');

%% ----------------------------------------------------------------
% 4Ô∏è‚É£  Process each channel
% -----------------------------------------------------------------
mua_cell = cell(numel(channels),1);
startSample = round(startTime * fs);
numSamples  = round(epochDuration * fs);

for k = 1:numel(channels)
    ch = channels(k);
    fprintf('   ‚Üí Channel %d of %d (%.0f s window)\n', ch+1, nChannels, epochDuration);

    % Load only selected epoch
    raw = bz_LoadBinary(fileDat, ...
        'channels', ch + 1, ...    % convert 0-based ‚Üí MATLAB indexing
        'nChannels', nChannels, ...
        'start', startSample, ...
        'duration', numSamples, ...
        'precision', 'int16');

    % ---- filtering pipeline ----
    sig_bp   = filtfilt(b,a,double(raw));           % band-pass
    sig_rect = abs(sig_bp);                         % rectify
    win      = round(fs * 0.002);                   % ~2 ms Gaussian smooth
    sig_env  = smoothdata(sig_rect,'gaussian',win); 
    sig_env_ds = downsample(sig_env, dsFactor);     % downsample
    mua_cell{k} = single(sig_env_ds);
end

%% ----------------------------------------------------------------
% 5Ô∏è‚É£  Combine & save
% -----------------------------------------------------------------
minLen = min(cellfun(@numel, mua_cell));
MUA.data     = zeros(minLen, numel(channels), 'single');
for k = 1:numel(channels)
    MUA.data(:,k) = mua_cell{k}(1:minLen);
end
MUA.fs        = targetFs;
MUA.band      = [lowCut highCut];
MUA.channels  = channels;
MUA.epoch.startSec     = startTime;
MUA.epoch.durationSec  = epochDuration;
MUA.epoch.type         = epochType;

outFile = fullfile(basepath, [sessionInfo.FileName '.MUA.mat']);
save(outFile,'MUA','-v7.3');
fprintf('‚úÖ  Saved %s\n', outFile);

%% ----------------------------------------------------------------
% 6Ô∏è‚É£  Optional quick plot
% -----------------------------------------------------------------
if usejava('desktop')
    figure('Name','MUA Envelope','Color','w');
    imagesc(zscore(MUA.data,[],1)'); axis xy;
    xlabel('Time (samples)'); ylabel('Channel (superficial ‚Üí deep)');
    title(sprintf('MUA Envelope (%d‚Äì%d Hz) [%s %.0f s]', ...
        lowCut, highCut, string(MUA.epoch.type), MUA.epoch.durationSec));
    colormap jet; colorbar;
end
end

%% ================================================================
function wakeEpochs = getWakeEpochs_fromStruct(S)
% Helper: return [N x 2] WAKE intervals (seconds)
wakeEpochs = [];

% Case A: SleepStateEpisodes.ints.WAKEepisode
if isfield(S,'SleepStateEpisodes') && isfield(S.SleepStateEpisodes,'ints')
    ints = S.SleepStateEpisodes.ints;
    if isfield(ints,'WAKEepisode') && ~isempty(ints.WAKEepisode)
        wakeEpochs = double(ints.WAKEepisode);
        return;
    end
end

% Case B: SleepState.ints.WAKE or similar
if isfield(S,'SleepState') && isfield(S.SleepState,'ints')
    ints = S.SleepState.ints;
    for cand = {'WAKE','WAKEstate','WAKEepochs'}
        f = cand{1};
        if isfield(ints,f) && ~isempty(ints.(f))
            wakeEpochs = double(ints.(f));
            return;
        end
    end
end
end
