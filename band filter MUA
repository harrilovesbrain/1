%% ================================================================
%  filterMUA_fixed.m
%  Purpose: Extract MUA envelope (500–5000 Hz band)
%           from a .dat file using your sessionInfo structure.
% ================================================================

clear; clc;

%% 1️⃣  Load session information
% Change these paths for your session
basepath = 'Z:\Buzsakilabspace\LabShare\JunH\Photometry\HJ017\250903\HJ017_250903_060719';
fileDat  = fullfile(basepath, 'HJ017_250903_060719.dat');
load(fullfile(basepath, 'HJ017_250903_060719_sessionInfo.mat'));

% --- Handle structure differences ---
if isfield(sessionInfo.rates, 'wideband')
    fs = sessionInfo.rates.wideband;      % normal field
elseif isfield(sessionInfo.session, 'SampleRate')
    fs = sessionInfo.session.SampleRate;  % alternate field
else
    error('Sampling rate not found in sessionInfo!');
end

nChannels = sessionInfo.nChannels;
channels  = sessionInfo.channels;         % use exactly as stored (0-based!)
targetFs  = sessionInfo.lfpSampleRate;    % match .lfp rate (1250 Hz)
dsFactor  = round(fs / targetFs);

fprintf('Loaded %s  |  %d channels  |  fs=%.0f Hz  |  target=%.0f Hz\n', ...
    sessionInfo.FileName, nChannels, fs, targetFs);

%% 2️⃣  Design band-pass filter (500–5000 Hz)
lowCut  = 500;
highCut = 5000;
order   = 3;
[b,a]   = butter(order, [lowCut highCut] / (fs/2), 'bandpass');

%% 3️⃣  Process each channel
mua_cell = cell(numel(channels), 1);

for k = 1:numel(channels)
    ch = channels(k);
    fprintf('Processing channel %d of %d...\n', ch, nChannels);

    % Load one channel from .dat file
    raw = bz_LoadBinary(fileDat, ...
        'channels', ch, ...
        'nChannels', nChannels, ...
        'precision', 'int16');

    % Step 1: Band-pass filter (500–5000 Hz)
    sig_bp = filtfilt(b, a, double(raw));

    % Step 2: Rectify (absolute value)
    sig_rect = abs(sig_bp);

    % Step 3: Smooth (≈2 ms Gaussian)
    win = round(fs * 0.002);
    sig_env = smoothdata(sig_rect, 'gaussian', win);

    % Step 4: Downsample (to match LFP rate)
    sig_env_ds = downsample(sig_env, dsFactor);

    % Store in cell array
    mua_cell{k} = single(sig_env_ds);
end

%% 4️⃣  Combine all channels into matrix
minLen = min(cellfun(@numel, mua_cell));
MUA.data     = zeros(minLen, numel(channels), 'single');
for k = 1:numel(channels)
    MUA.data(:,k) = mua_cell{k}(1:minLen);
end
MUA.fs       = targetFs;
MUA.band     = [lowCut highCut];
MUA.channels = channels;

%% 5️⃣  Save MUA file
outFile = fullfile(basepath, [sessionInfo.FileName '.MUA.mat']);
save(outFile, 'MUA', '-v7.3');
fprintf('\n✅ Saved %s\n', outFile);

%% 6️⃣  Quick check plot
figure;
imagesc(zscore(MUA.data,[],1)'); axis xy;
xlabel('Time (samples)'); ylabel('Channel (superficial → deep)');
title(sprintf('MUA Envelope (%d–%d Hz)', lowCut, highCut));
colormap jet; colorbar;
